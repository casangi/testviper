{"uid":"41e47f390f0765","name":"test_dataarray_numpy_else_branch_creation_attached_and_printed","fullName":"tests.unit.distributed.image_analysis.test_selection.TestReturnKinds#test_dataarray_numpy_else_branch_creation_attached_and_printed","historyId":"11d7c2ec2fa61d17e57c7f4144ba0980","time":{"start":1757971913258,"stop":1757971913260,"duration":2},"description":"\nCover the else-branch in _coerce_return_kind for return_kind='dataarray-numpy':\n    da_out = xr.DataArray(arr, dims=dims, coords=coords)\n    if creation is not None:\n        print(\"********** covered *********\")\n        da_out = da_out.assign_attrs({\"creation\": creation})\nUse ndarray `data` and ndarray `select` so the aligned mask is a NumPy array\n(not an xarray.DataArray), forcing the targeted branch.\n","descriptionHtml":"<p>Cover the else-branch in _coerce_return_kind for return_kind='dataarray-numpy':<br />\nda_out = xr.DataArray(arr, dims=dims, coords=coords)<br />\nif creation is not None:<br />\nprint(&quot;********** covered *********&quot;)<br />\nda_out = da_out.assign_attrs({&quot;creation&quot;: creation})<br />\nUse ndarray <code>data</code> and ndarray <code>select</code> so the aligned mask is a NumPy array<br />\n(not an xarray.DataArray), forcing the targeted branch.</p>\n","status":"passed","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"monkeypatch","time":{"start":1757971913257,"stop":1757971913257,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"_headless_matplotlib","time":{"start":1757971913257,"stop":1757971913257,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"capsys","time":{"start":1757971913258,"stop":1757971913258,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"afterStages":[{"name":"monkeypatch::0","time":{"start":1757971913260,"stop":1757971913260,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"capsys::0","time":{"start":1757971913260,"stop":1757971913260,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"parentSuite","value":"tests.unit.distributed.image_analysis"},{"name":"suite","value":"test_selection"},{"name":"subSuite","value":"TestReturnKinds"},{"name":"host","value":"runnervmf4ws1"},{"name":"thread","value":"3749-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.unit.distributed.image_analysis.test_selection"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[],"history":{"statistic":{"failed":0,"broken":0,"skipped":0,"passed":7,"unknown":0,"total":7},"items":[{"uid":"1a6ff856beefd405","status":"passed","time":{"start":1757966007058,"stop":1757966007060,"duration":2}},{"uid":"fe480a8db3bee3ea","status":"passed","time":{"start":1757947496755,"stop":1757947496757,"duration":2}},{"uid":"b72562a2e0dd9112","status":"passed","time":{"start":1757939490222,"stop":1757939490224,"duration":2}},{"uid":"9b1ca2b80e3990c0","status":"passed","time":{"start":1757694354081,"stop":1757694354082,"duration":1}},{"uid":"4b84b326baab5d70","status":"passed","time":{"start":1757445700521,"stop":1757445700521,"duration":0}},{"uid":"375e49cb3f145210","status":"passed","time":{"start":1757315345672,"stop":1757315345673,"duration":1}}]},"tags":[]},"source":"41e47f390f0765.json","parameterValues":[]}