name: Integration Tests with Allure Report
on:
  push:
    branches: ["**"]
  pull_request:
    branches: ["**"]

jobs:
  integration-tests:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout testviper
      uses: actions/checkout@v5
      with:
        path: testviper
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'
    
    - name: Install testviper dependencies
      run: |
        python -m pip install --upgrade pip
        cd testviper
        make build-testviper
        ls -l
    
    - name: Clone component repositories
      run: |
        git clone https://github.com/casangi/toolviper.git
        git clone https://github.com/casangi/xradio.git
    
    - name: Install components
      run: |
        make build-main
    
    - name: Run Integration Tests (testviper)
      run: |
        cd testviper
        pytest tests/integration --alluredir=allure-results/integration
    
    - name: Run Toolviper Component Tests
      run: |
        cd toolviper
        pytest tests --alluredir=../testviper/allure-results/toolviper
    
    - name: Run Xradio Component Tests
      run: |
        cd xradio
        pytest tests --alluredir=../testviper/allure-results/xradio
    
    - name: Install Allure CLI
      run: |
        wget -qO- https://github.com/allure-framework/allure2/releases/download/2.24.1/allure-2.24.1.tgz | tar -xz
        sudo mv allure-2.24.1 /opt/allure
        sudo ln -s /opt/allure/bin/allure /usr/local/bin/allure
    
    - name: Generate Allure Reports
      run: |
        cd testviper
        allure generate allure-results/integration -o allure-report/integration --clean
        allure generate allure-results/toolviper -o allure-report/toolviper --clean
        allure generate allure-results/xradio -o allure-report/xradio --clean
    
    - name: Upload Allure Reports
      uses: actions/upload-artifact@v5
      if: always()
      with:
        name: allure-reports
        path: testviper/allure-report/
        retention-days: 30

    - name: Deploy to GitHub Pages
      uses: peaceiris/actions-gh-pages@v5
      if: github.ref == 'refs/heads/main'
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: testviper/allure-report



# ---
# name: Integration Tests - Linux

# on:
#   push:
#     branches: ["**"]
#   pull_request:

# jobs:
#   test:
#     name: >-
#       Integration Tests on ${{ matrix.os }} /
#       Python ${{ matrix.python-version }}
#     runs-on: ${{ matrix.os }}
#     strategy:
#       matrix:
#         os: [ubuntu-latest]
#         python-version: ["3.12", "3.13"]

#     steps:
#       - name: Checkout repository
#         uses: actions/checkout@v4

#       - name: Set up Python ${{ matrix.python-version }}
#         uses: actions/setup-python@v5
#         with:
#           python-version: ${{ matrix.python-version }}

#       - name: Clone component repositories
#         run: |
#           git clone https://github.com/casangi/toolviper.git
#           git clone https://github.com/casangi/xradio.git
#           git clone https://github.com/casangi/graphviper.git
#           git clone https://github.com/casangi/astroviper.git

#       - name: Install testviper dependencies
#         run: pip install -r requirements/base.txt

#       - name: Install components and their dependencies
#         run: make build-main
# #        run: pip install -r requirements/main.tx

#       # - name: Create test results directories
#       #   run: |
#       #     mkdir -p testviper-tests/${{ matrix.python-version }}
#       #     mkdir -p toolviper-tests/${{ matrix.python-version }}
#       #     mkdir -p graphviper-tests/${{ matrix.python-version }}
#       #     mkdir -p astroviper-tests/${{ matrix.python-version }}
#       #     mkdir -p xradio-tests/${{ matrix.python-version }}

#       - name: Setup Testspace
#         uses: testspace-com/setup-testspace@v1
#         with:
#           domain: 'casangi'
#           project: 'testviper'

#       - name: Run testviper integration tests
#         run: |
#           pytest -v tests/integration/ \
#           --junitxml="testviper-test-results.xml"
#           ls -l testviper*

#       - name: Publish testviper results to Testspace
#         run: |
#           testspace testviper-test-results.xml "${{ github.ref_name }}:${{ matrix.python-version }}"
#         if: always()
  
#       - name: Run xradio tests
#         run: |
#           pytest -v ./xradio/tests/unit \
#           --cov=xradio \
#           --no-cov-on-fail \
#           --doctest-modules \
#           --cov-report=xml:xradio-coverage.xml \
#           --junitxml="xradio-test-results.xml"
#           ls -l .
#           ls -l xradio*

#       - name: Publish xradio results to Testspace
#         run: |
#           testspace xradio-test-results.xml xradio-coverage.xml "${{ github.ref_name }}:${{ matrix.python-version }}"
#         if: always()

#       - name: Run toolviper tests
#         run: |
#           pytest -v ./toolviper/tests/ \
#           --cov=toolviper \
#           --no-cov-on-fail \
#           --doctest-modules \
#           --cov-report=xml:toolviper-coverage.xml \
#           --junitxml="toolviper-test-results.xml"
#           ls -l toolviper*

#       - name: Publish toolviper results to Testspace
#         run: |
#           testspace toolviper-test-results.xml toolviper-coverage.xml "${{ github.ref_name }}:${{ matrix.python-version }}"
#         if: always()

#       - name: Run graphviper tests
#         run: |
#           pytest -v ./graphviper/tests/ \
#           --cov=graphviper \
#           --no-cov-on-fail \
#           --doctest-modules \
#           --cov-report=xml:graphviper-coverage.xml \
#           --junitxml="graphviper-test-results.xml"
#           ls -l graphviper*

#       - name: Publish graphviper results to Testspace
#         run: |
#           testspace graphviper-test-results.xml graphviper-coverage.xml "[${{ github.ref_name }}:${{ matrix.python-version }}]"
#         if: always()

#       - name: Run astroviper tests
#         run: |
#           pytest -v ./astroviper/tests/ \
#           --cov=astroviper \
#           --no-cov-on-fail \
#           --doctest-modules \
#           --cov-report=xml:astroviper-coverage.xml \
#           --junitxml="astroviper-test-results.xml"
#           ls -l astroviper*

#       - name: Publish astroviper results to Testspace
#         run: |
#           testspace astroviper-test-results.xml astroviper-coverage.xml "${{ github.ref_name }}:${{ matrix.python-version }}"
#         if: always()

#       - name: Upload test results
#         if: always()
#         uses: actions/upload-artifact@v4
#         with:
#           name: test-results-${{ matrix.python-version }}
#           path: |
#             test-results/*.xml
#           if-no-files-found: ignore